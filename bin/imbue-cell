#! /usr/bin/env node

let debug = require('debug')("imbue:cell:main");

let { CellNetworkResource } = require('../dist')


let key = Buffer.alloc(32);

let onSocket = (socket, isTcp) => {
    debug(`callback: ${isTcp ? 'tcp' : 'utp'} socket connected:`, socket.address());
}

let onClose = () => {
    debug('clalback: closing socket');
}

let onBind = () => {
    debug('callback: binding socket');
}

let onPeer = (peer) => {
    cnr2.connect(peer)
        .then((socket) => {
            socket.write('WOW!!!')
        }).catch((err) => console.log)
}

let onAnnouncePeer = (peer) => {
    debug('announcement peer discovered:', peer)
}

let announcer = new CellNetworkResource({
    announce: true,
    broadcastLocalAddress: true,
    ephemeral: true,
    port: 10000,
    onSocket: onSocket,
    onBind: onBind,
    onClose: onClose
});

let cnr2 = new CellNetworkResource({
    announce: true,
    broadcastLocalAddress: true,
    ephemeral: true,
    port: 10010,
    onSocket: onSocket,
    onBind: onBind,
    onClose: onClose
});

announcer.attach().then(() => {
    return announcer.announce(key, {
        lookup: true
    });
}).then((topic) => {
    topic.on('peer', onAnnouncePeer);
}).catch((err) => console.log(err))


cnr2.attach()
    .then(() => {
        return cnr2.lookup(key);
    }).then((topic) => {
        topic.on('peer', onPeer);
    }).catch((err) => console.log(err))

    